import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

/**
 *
 * @author airin
 */
public class Cell extends JPanel {
    private char token=' ';

    public char getToken() {
        return token;
    }

    public void setToken(char token) {
        this.token = token;
        repaint();
    }
    
    @Override
    public void paintComponent(Graphics g){
        super.paintComponent(g);
        if(token=='X'){
            g.setColor(Color.RED);
            g.drawLine(20, 20, getWidth()-20, getHeight()-20);
            g.drawLine(getWidth()-20, 20, 20, getHeight()-20);
        }
        else if(token == 'O'){
            g.setColor(Color.GREEN);
            g.drawOval(30, 30, getWidth()-40, getHeight()-40);
        }
    }
}
    
class TicTacToe extends JFrame {
    private char whoseTurn ='X';
    private Cell[][]cell = new Cell[3][3];
    private JLabel jlblStatus = new JLabel("X's turn to play");
    private JFrame frame = new JFrame();
    private JPanel panel = new JPanel(new GridLayout(3,3));
    
    public TicTacToe(){
        panel.setLayout(new GridLayout(3,3));
        panel.setSize(300,300);
        panel.setVisible(true);
        jlblStatus.setFont(new Font("Arial",Font.BOLD,30));
        for(int i=0; i<3; i++){
            for(int j=0; j<3; j++){
                cell[i][j]= new Cell();
                cell[i][j].setBackground(Color.WHITE);
                panel.add(cell[i][j]);
                cell[i][j].addMouseListener(new MyMouseListener());
            }
        }
        add(panel);
        add(jlblStatus, BorderLayout.SOUTH);
        
    }
    
    public boolean isFull(){
        for(int i=0; i<3; i++){
            for(int j=0; j<3; j++){
               if(cell[i][j].getToken()== ' '){
                   return false;
               }
            }
        }
        return true;
    }
    
    public boolean isWon(char token){
        for(int i=0; i<3; i++){
            if(cell[i][0].getToken()== token && 
               cell[i][1].getToken()== token && 
               cell[i][2].getToken()==token){
               return true;
            }
        }
        for(int j=0; j<3; j++){
            if(cell[0][j].getToken()== token && 
               cell[1][j].getToken()== token && 
               cell[2][j].getToken()==token){
               return true;
            }
        }
        if(cell[0][0].getToken()== token && 
               cell[1][1].getToken()== token && 
               cell[2][2].getToken()==token){
               return true;
       }
        if(cell[0][2].getToken()== token && 
               cell[1][1].getToken()== token && 
               cell[2][0].getToken()==token){
               return true;
        }
        return false;
}
    
    private class MyMouseListener extends MouseAdapter{
        @Override
        public void mouseClicked(MouseEvent e){
            Cell clickedCell = (Cell) e.getSource();
            
            if(clickedCell.getToken()== ' ' && whoseTurn != ' '){
                clickedCell.setToken(whoseTurn);
                
                if(isWon(whoseTurn)){
                    jlblStatus.setText(whoseTurn + "wins! Game over.");
                    gameOver(whoseTurn + "wins!");
                    whoseTurn = ' ';
                }
                else if(isFull()){
                    jlblStatus.setText("It is a draw! Game over.");
                     gameOver(whoseTurn + "wins!");
                    whoseTurn = ' ';
                }
                else{
                    whoseTurn = (whoseTurn=='X')?'O':'X';
                    //gameOver(whoseTurn + "wins!");
                    jlblStatus.setText(whoseTurn + "'s turn to play");
                }
            }
        }
    }
    
    public void gameOver(String s){
       JOptionPane.showOptionDialog(null, s, "Game Over", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null,new Object[]{}, null);
    }
    
    public static void main(String[] args) {
        TicTacToe frame = new TicTacToe();
        frame.setTitle("TIC TAC TOE");
        frame.setSize(500, 500);
        frame.setLocationRelativeTo(null);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setVisible(true);
        
    }
    
  } 
    

